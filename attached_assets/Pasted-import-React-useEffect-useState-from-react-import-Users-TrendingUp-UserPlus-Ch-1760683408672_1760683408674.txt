import React, { useEffect, useState } from 'react';
import {
  Users,
  TrendingUp,
  UserPlus,
  CheckCircle,
  Clock,
  Calendar,
  Target,
  Award,
  Activity,
  ArrowUpRight,
  ArrowDownRight,
  User
} from 'lucide-react';

interface Lead {
  id: string | number;  // Allow both string and number
  status: string;
  name: string;
  email: string;
  phone?: string;
  company?: string;
  stage?: string;
  value?: number;
  source?: string;
  created_at?: string;
  updated_at?: string;
  assigned_to_employee_id?: number;
}

interface Employee {
  id: string;
  status: string;
  name: string;
  department?: string;
  employee_id?: string;
  email?: string;
  phone?: string;
  created_at?: string;
  updated_at?: string;
}

interface DashboardProps {
  currentUser: {
    username: string;
    token: string;
    employee_id?: number;
    id?: number;
  };
}

interface LeadsResponse {
  leads: Lead[];
  total: number;
  hot_leads_count: number;
  filtered_count: number;
}

interface DashboardStats {
  today_attendance: number;
  pending_leaves: number;
  on_leave_today?: number;
  total_employees?: number;
  attendance_rate?: number;
  current_date?: string;
}

interface TodayAttendance {
  id: number;
  employee_id: number;
  date: string;
  clock_in: string;
  clock_out: string | null;
  status: string;
  location_name: string;
  created_at?: string;
}

interface RecentActivity {
  id: string;
  type: 'attendance' | 'lead' | 'employee' | 'leave' | 'task';
  message: string;
  time: string;
  icon: React.ComponentType<any>;
  timestamp: string | undefined;
}

interface QuickAction {
  title: string;
  description: string;
  icon: React.ComponentType<any>;
  action: () => void;
  disabled?: boolean;
}

const Dashboard: React.FC<DashboardProps> = ({ currentUser }) => {
  const [leads, setLeads] = useState<Lead[]>([]);
  const [hotLeadsCount, setHotLeadsCount] = useState<number>(0);
  const [totalLeadsCount, setTotalLeadsCount] = useState<number>(0);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [dashboardStats, setDashboardStats] = useState<DashboardStats>({
    today_attendance: 0,
    pending_leaves: 0
  });

  const [loadingLeads, setLoadingLeads] = useState(false);
  const [loadingEmployees, setLoadingEmployees] = useState(false);
  const [loadingStats, setLoadingStats] = useState(false);

  const [errorLeads, setErrorLeads] = useState('');
  const [errorEmployees, setErrorEmployees] = useState('');
  const [errorStats, setErrorStats] = useState('');

  // Quick Actions States
  const [showLeadModal, setShowLeadModal] = useState(false);
  const [showLeaveModal, setShowLeaveModal] = useState(false);
  const [newLead, setNewLead] = useState({
    name: '',
    email: '',
    phone: '',
    company: '',
    status: 'warm',
    stage: 'lead',
    value: 0,
    source: '',
    last_contact: '',
    next_follow_up: '',
    notes: '',
    lead_score: 0,
    assigned_to_employee_id: undefined as number | undefined
  });
  const [leaveData, setLeaveData] = useState({
    start_date: '',
    end_date: '',
    reason: '',
    leave_type: 'casual',
    emergency_contact: ''
  });

  // ✅ ATTENDANCE STATES
  const [todayAttendance, setTodayAttendance] = useState<TodayAttendance | null>(null);
  const [isMarkingAttendance, setIsMarkingAttendance] = useState(false);
  const [loadingTodayAttendance, setLoadingTodayAttendance] = useState(false);
  const [attendanceMessage, setAttendanceMessage] = useState('');

  // ✅ RECENT ACTIVITIES STATE
  const [recentActivities, setRecentActivities] = useState<RecentActivity[]>([]);

  // ✅ EMPLOYEE MAPPING FOR ASSIGNED LEADS
  const [employeeMap, setEmployeeMap] = useState<Map<number, Employee>>(new Map());

  // ✅ TIME FORMATTING HELPER FUNCTION WITH TYPE SAFETY
  const formatTimeAgo = (dateString: string | undefined | null): string => {
    if (!dateString) return 'Recently';

    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return 'Recently';
      }

      const now = new Date();
      const diffMs = now.getTime() - date.getTime();
      const diffMinutes = Math.floor(diffMs / (1000 * 60));
      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

      if (diffMinutes < 1) return 'Just now';
      if (diffMinutes < 60) return `${diffMinutes} minutes ago`;
      if (diffHours < 24) return `${diffHours} hours ago`;
      if (diffDays === 1) return '1 day ago';
      if (diffDays < 7) return `${diffDays} days ago`;
      if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
      return `${Math.floor(diffDays / 30)} months ago`;
    } catch (error) {
      console.error('Error formatting time:', error);
      return 'Recently';
    }
  };


  

  // ✅ GET ASSIGNED EMPLOYEE NAME
  const getAssignedEmployeeName = (assignedToId?: number): string => {
    if (!assignedToId) return 'Unassigned';
    
    const employee = employeeMap.get(assignedToId);
    return employee ? employee.name : 'Unknown Employee';
  };

  // ✅ GET ASSIGNED EMPLOYEE DETAILS
  const getAssignedEmployeeDetails = (assignedToId?: number): { name: string; employeeId: string; department?: string } => {
    if (!assignedToId) return { name: 'Unassigned', employeeId: 'N/A' };
    
    const employee = employeeMap.get(assignedToId);
    return employee ? { 
      name: employee.name, 
      employeeId: employee.employee_id || 'N/A',
      department: employee.department
    } : { name: 'Unknown Employee', employeeId: 'N/A' };
  };

// ✅ COMPREHENSIVE FIX: Handle both string and number IDs
useEffect(() => {
  if (employees.length > 0) {
    const map = new Map<number, Employee>();
    employees.forEach(emp => {
      // Handle both string and number IDs
      let employeeId: number;
      if (typeof emp.id === 'string') {
        employeeId = parseInt(emp.id);
      } else {
        employeeId = emp.id;
      }
      
      // Only add to map if we have a valid number
      if (!isNaN(employeeId)) {
        map.set(employeeId, emp);
      }
    });
    setEmployeeMap(map);
  }
}, [employees]);

  // ✅ UPDATE RECENT ACTIVITIES WITH REAL DATA
  const updateRecentActivities = () => {
    const activities: RecentActivity[] = [];

    if (todayAttendance) {
      activities.push({
        id: `attendance_${todayAttendance.id}`,
        type: 'attendance',
        message: todayAttendance.clock_out ?
          `Clock out at ${todayAttendance.clock_out}` :
          `Clock in at ${todayAttendance.clock_in}`,
        time: formatTimeAgo(todayAttendance.created_at),
        icon: Clock,
        timestamp: todayAttendance.created_at
      });
    }

    if (leads.length > 0) {
      const recentLeads = leads
        .filter(lead => lead.created_at)
        .sort((a, b) => {
          const timeA = a.created_at ? new Date(a.created_at).getTime() : 0;
          const timeB = b.created_at ? new Date(b.created_at).getTime() : 0;
          return timeB - timeA;
        })
        .slice(0, 2);

      recentLeads.forEach(lead => {
        activities.push({
          id: `lead_${lead.id}`,
          type: 'lead',
          message: `New lead added: ${lead.name}`,
          time: formatTimeAgo(lead.created_at),
          icon: Users,
          timestamp: lead.created_at
        });
      });
    }

    if (employees.length > 0) {
      const newEmployees = employees
        .filter(emp => emp.created_at)
        .sort((a, b) => {
          const timeA = a.created_at ? new Date(a.created_at).getTime() : 0;
          const timeB = b.created_at ? new Date(b.created_at).getTime() : 0;
          return timeB - timeA;
        })
        .slice(0, 2);

      newEmployees.forEach(emp => {
        activities.push({
          id: `emp_${emp.id}`,
          type: 'employee',
          message: `New employee onboarded: ${emp.name}`,
          time: formatTimeAgo(emp.created_at),
          icon: UserPlus,
          timestamp: emp.created_at
        });
      });
    }

    const sampleLeaveTime = new Date();
    sampleLeaveTime.setDate(sampleLeaveTime.getDate() - 2);
    activities.push({
      id: 'leave_sample',
      type: 'leave',
      message: 'Leave request approved',
      time: formatTimeAgo(sampleLeaveTime.toISOString()),
      icon: Calendar,
      timestamp: sampleLeaveTime.toISOString()
    });

    const sampleTaskTime = new Date();
    sampleTaskTime.setHours(sampleTaskTime.getHours() - 4);
    activities.push({
      id: 'task_sample',
      type: 'task',
      message: 'Task completed: Market Research',
      time: formatTimeAgo(sampleTaskTime.toISOString()),
      icon: CheckCircle,
      timestamp: sampleTaskTime.toISOString()
    });

    activities.sort((a, b) => {
      const timeA = a.timestamp ? new Date(a.timestamp).getTime() : 0;
      const timeB = b.timestamp ? new Date(b.timestamp).getTime() : 0;
      return timeB - timeA;
    });

    setRecentActivities(activities.slice(0, 5));
  };

  // Single API call for all leads data including hot leads count
  useEffect(() => {
    fetchLeadsData();
  }, [currentUser.token]);

  // Fetch active employees
  useEffect(() => {
    fetchEmployees();
  }, [currentUser.token]);

  // Fetch dashboard stats (Today's Attendance and Pending Leaves)
  useEffect(() => {
    fetchDashboardStats();
  }, [currentUser.token]);

  // ✅ FETCH TODAY'S ATTENDANCE
  useEffect(() => {
    if (currentUser.employee_id || currentUser.id) {
      fetchTodayAttendance();
    }
  }, [currentUser.token, currentUser.employee_id, currentUser.id]);

  // ✅ UPDATE RECENT ACTIVITIES WHENEVER DATA CHANGES
  useEffect(() => {
    updateRecentActivities();
  }, [leads, employees, todayAttendance]);

  // ✅ FETCH TODAY'S ATTENDANCE WITH PROPER STATUS MESSAGES
  const fetchTodayAttendance = async (): Promise<void> => {
    const employeeId = currentUser.employee_id || currentUser.id;
    if (!employeeId) return;

    setLoadingTodayAttendance(true);
    try {
      const response = await fetch(
        `http://localhost:8000/api/v1/attendance-leave/attendance/today?employee_id=${employeeId}`,
        {
          headers: {
            'Authorization': `Bearer ${currentUser.token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.ok) {
        const data: TodayAttendance = await response.json();
        setTodayAttendance(data);

        if (data && data.clock_out) {
          setAttendanceMessage(`✅ Completed (In: ${data.clock_in}, Out: ${data.clock_out})`);
        } else if (data && !data.clock_out) {
          setAttendanceMessage(`🟢 Clocked In at ${data.clock_in}`);
        } else {
          setAttendanceMessage('⚪ Not Clocked In');
        }
      } else if (response.status === 404) {
        setTodayAttendance(null);
        setAttendanceMessage('⚪ Not Clocked In');
      } else {
        setTodayAttendance(null);
        setAttendanceMessage('⚪ Not Clocked In');
      }
    } catch (error) {
      console.error('Error fetching today attendance:', error);
      setTodayAttendance(null);
      setAttendanceMessage('⚪ Not Clocked In');
    } finally {
      setLoadingTodayAttendance(false);
    }
  };

  const fetchLeadsData = async (): Promise<void> => {
    setLoadingLeads(true);
    setErrorLeads('');
    try {
      const response = await fetch('http://localhost:8000/api/v1/crm/leads/', {
        headers: {
          Authorization: `Bearer ${currentUser.token}`,
          'Content-Type': 'application/json'
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch leads: ${response.status}`);
      }

      const data: LeadsResponse = await response.json();

      if (data.leads && Array.isArray(data.leads)) {
        setLeads(data.leads);
        setHotLeadsCount(data.hot_leads_count || 0);
        setTotalLeadsCount(data.total || 0);
      } else {
        setLeads([]);
        setHotLeadsCount(0);
        setTotalLeadsCount(0);
      }
    } catch (err: any) {
      console.error('Leads fetch error:', err);
      setErrorLeads(err.message || 'Unknown error occurred');
      setLeads([]);
      setHotLeadsCount(0);
      setTotalLeadsCount(0);
    } finally {
      setLoadingLeads(false);
    }
  };

  const fetchEmployees = async (): Promise<void> => {
    setLoadingEmployees(true);
    setErrorEmployees('');
    try {
      const response = await fetch('http://localhost:8000/api/v1/employees?status=active', {
        headers: {
          Authorization: `Bearer ${currentUser.token}`,
          'Content-Type': 'application/json'
        },
      });

      if (!response.ok) throw new Error('Failed to fetch employees');

      const data = await response.json();

      let employeesData: Employee[] = [];

      if (Array.isArray(data)) {
        employeesData = data;
      } else if (data.employees && Array.isArray(data.employees)) {
        employeesData = data.employees;
      } else if (data.data && Array.isArray(data.data)) {
        employeesData = data.data;
      }

      employeesData.sort((a, b) => {
        const timeA = a.created_at ? new Date(a.created_at).getTime() : 0;
        const timeB = b.created_at ? new Date(b.created_at).getTime() : 0;
        return timeB - timeA;
      });

      setEmployees(employeesData);
    } catch (err: any) {
      console.error('Employees fetch error:', err);
      setErrorEmployees(err.message || 'Unknown error occurred');
      setEmployees([]);
    } finally {
      setLoadingEmployees(false);
    }
  };

  const fetchDashboardStats = async (): Promise<void> => {
    setLoadingStats(true);
    setErrorStats('');
    try {
      const response = await fetch('http://localhost:8000/api/v1/attendance-leave/dashboard/stats', {
        headers: {
          Authorization: `Bearer ${currentUser.token}`,
          'Content-Type': 'application/json'
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch dashboard stats: ${response.status}`);
      }

      const data: DashboardStats = await response.json();
      setDashboardStats(data);
    } catch (err: any) {
      console.error('Dashboard stats fetch error:', err);
      setErrorStats(err.message || 'Unknown error occurred');
      setDashboardStats({
        today_attendance: 0,
        pending_leaves: 0
      });
    } finally {
      setLoadingStats(false);
    }
  };

  // Quick Actions Handlers
  const handleAddNewLead = (): void => {
    setShowLeadModal(true);
  };

  const handleCreateLeadSubmit = async (): Promise<void> => {
    try {
      const leadData = {
        ...newLead,
        phone: newLead.phone || null,
        source: newLead.source || null,
        last_contact: newLead.last_contact || null,
        next_follow_up: newLead.next_follow_up || null,
        notes: newLead.notes || null,
        assigned_to_employee_id: newLead.assigned_to_employee_id || null
      };

      const response = await fetch('http://localhost:8000/api/v1/crm/leads/', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${currentUser.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(leadData)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Failed to create lead');
      }

      await response.json();
      alert('Lead created successfully!');
      setShowLeadModal(false);

      setNewLead({
        name: '',
        email: '',
        phone: '',
        company: '',
        status: 'warm',
        stage: 'lead',
        value: 0,
        source: '',
        last_contact: '',
        next_follow_up: '',
        notes: '',
        lead_score: 0,
        assigned_to_employee_id: undefined
      });

      fetchLeadsData();

    } catch (error: any) {
      console.error('Error creating lead:', error);
      alert(error.message || 'Error creating lead');
    }
  };

  // ✅ FIXED ATTENDANCE FUNCTION - PREVENTS MULTIPLE CHECK-IN
  const handleMarkAttendance = async (): Promise<void> => {
    setIsMarkingAttendance(true);
    try {
      const employeeId = currentUser.employee_id || currentUser.id;

      if (!employeeId) {
        alert('Unable to identify employee. Please login again.');
        return;
      }

      const now = new Date();
      const currentDate = now.toISOString().split('T')[0];
      const currentTime = now.toTimeString().split(' ')[0];

      if (todayAttendance && todayAttendance.clock_out) {
        alert('✅ You have already completed your attendance for today!\n\n' +
          `Clock In: ${todayAttendance.clock_in}\n` +
          `Clock Out: ${todayAttendance.clock_out}\n\n` +
          `You can check in again tomorrow.`);
        return;
      }

      if (todayAttendance && !todayAttendance.clock_out) {
        const clockOutResponse = await fetch(
          `http://localhost:8000/api/v1/attendance-leave/attendance/${todayAttendance.id}/clock-out?clock_out=${currentTime}`,
          {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${currentUser.token}`,
              'Content-Type': 'application/json'
            }
          }
        );

        if (!clockOutResponse.ok) {
          const errorData = await clockOutResponse.json();
          throw new Error(errorData.detail || 'Failed to clock out');
        }

        await clockOutResponse.json();
        setAttendanceMessage(`✅ Completed (In: ${todayAttendance.clock_in}, Out: ${currentTime})`);
        alert(`✅ Clock Out Successful!\n\nClock In: ${todayAttendance.clock_in}\nClock Out: ${currentTime}`);

      } else {
        const doubleCheckResponse = await fetch(
          `http://localhost:8000/api/v1/attendance-leave/attendance/today?employee_id=${employeeId}`,
          {
            headers: {
              'Authorization': `Bearer ${currentUser.token}`,
              'Content-Type': 'application/json'
            }
          }
        );

        if (doubleCheckResponse.ok) {
          const existingRecord = await doubleCheckResponse.json();
          if (existingRecord && existingRecord.id) {
            alert('⏰ You have already clocked in today! Please refresh the page.');
            await fetchTodayAttendance();
            return;
          }
        }

        const locationData = await getLocationData();
        const deviceInfo = getDeviceInfo();

        const attendanceData = {
          employee_id: employeeId,
          date: currentDate,
          clock_in: currentTime,
          location_name: locationData.location_name,
          latitude: locationData.latitude,
          longitude: locationData.longitude,
          is_within_geofence: locationData.is_within_geofence,
          status: "present",
          device_info: deviceInfo,
          notes: "Clock-in from dashboard"
        };

        const clockInResponse = await fetch(
          'http://localhost:8000/api/v1/attendance-leave/attendance/clock-in',
          {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${currentUser.token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(attendanceData)
          }
        );

        if (!clockInResponse.ok) {
          const errorData = await clockInResponse.json();

          if (errorData.detail && errorData.detail.includes('Already clocked in today')) {
            setAttendanceMessage(`🟢 Clocked In at ${currentTime}`);
            alert('⏰ You have already clocked in today! Please refresh the page.');
            await fetchTodayAttendance();
            return;
          }

          throw new Error(errorData.detail || 'Failed to mark attendance');
        }

        await clockInResponse.json();
        setAttendanceMessage(`🟢 Clocked In at ${currentTime}`);
        alert(`✅ Clock In Successful!\n\nTime: ${currentTime}\nLocation: ${locationData.location_name}`);
      }

      await fetchTodayAttendance();
      await fetchDashboardStats();

    } catch (error: any) {
      console.error('Error marking attendance:', error);

      if (error.message.includes('Already clocked in today')) {
        alert('⏰ You have already clocked in today!');
      } else if (error.message.includes('Failed to fetch')) {
        alert('🌐 Network error: Please check your internet connection.');
      } else {
        alert(`❌ Error: ${error.message}`);
      }
    } finally {
      setIsMarkingAttendance(false);
    }
  };

  // 🔧 HELPER FUNCTIONS
  const getLocationData = async (): Promise<{
    location_name: string;
    latitude: number;
    longitude: number;
    is_within_geofence: boolean;
  }> => {
    let locationData = {
      location_name: "Main Office",
      latitude: 28.6129,
      longitude: 77.2295,
      is_within_geofence: true
    };

    if (navigator.geolocation) {
      try {
        const position = await new Promise<GeolocationPosition>((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(resolve, reject, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
          });
        });

        locationData = {
          location_name: "GPS Location",
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          is_within_geofence: await checkGeofence(position.coords.latitude, position.coords.longitude)
        };
      } catch (gpsError) {
        console.log('GPS not available, using default location');
      }
    }

    return locationData;
  };

  const checkGeofence = async (lat: number, lng: number): Promise<boolean> => {
    const officeLat = 28.6129;
    const officeLng = 77.2295;
    const radius = 0.01;

    const distance = Math.sqrt(
      Math.pow(lat - officeLat, 2) + Math.pow(lng - officeLng, 2)
    );

    return distance <= radius;
  };

  const getDeviceInfo = (): object => {
    return {
      user_agent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      screen_resolution: `${window.screen.width}x${window.screen.height}`,
      vendor: navigator.vendor,
      cookies_enabled: navigator.cookieEnabled,
      online_status: navigator.onLine
    };
  };

  const handleApplyLeave = (): void => {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    setLeaveData({
      start_date: today.toISOString().split('T')[0],
      end_date: tomorrow.toISOString().split('T')[0],
      reason: '',
      leave_type: 'casual',
      emergency_contact: ''
    });
    setShowLeaveModal(true);
  };

  const handleCreateLeaveSubmit = async (): Promise<void> => {
    try {
      const employeeId = currentUser.employee_id || currentUser.id;
      if (!employeeId) {
        alert('Employee ID not found');
        return;
      }

      const leavePayload = {
        employee_id: employeeId,
        leave_type: leaveData.leave_type,
        start_date: leaveData.start_date,
        end_date: leaveData.end_date,
        reason: leaveData.reason,
        emergency_contact: leaveData.emergency_contact || null
      };

      const response = await fetch(
        'http://localhost:8000/api/v1/attendance-leave/leave-requests',
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${currentUser.token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(leavePayload)
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Failed to apply leave');
      }

      await response.json();
      alert('Leave applied successfully!');
      setShowLeaveModal(false);
      setLeaveData({
        start_date: '',
        end_date: '',
        reason: '',
        leave_type: 'casual',
        emergency_contact: ''
      });

      fetchDashboardStats();

    } catch (error: any) {
      console.error('Error applying leave:', error);
      alert(error.message || 'Error applying leave');
    }
  };

  const handleCreateTask = (): void => {
    alert('Create Task functionality (frontend only)');
  };

  // ✅ PERFECT QUICK ACTIONS WITH SMART ATTENDANCE
  const quickActions: QuickAction[] = [
    {
      title: 'Add New Lead',
      description: 'Create a new sales lead',
      icon: Users,
      action: handleAddNewLead,
      disabled: false
    },
    {
      title: isMarkingAttendance ? 'Processing...' :
        (todayAttendance && !todayAttendance.clock_out ? 'Clock Out' :
          (todayAttendance && todayAttendance.clock_out ? 'Completed Today' : 'Clock In')),
      description: todayAttendance && !todayAttendance.clock_out ?
        `Click to clock out (Currently clocked in since ${todayAttendance.clock_in})` :
        (todayAttendance && todayAttendance.clock_out ?
          `Today's attendance completed at ${todayAttendance.clock_out}` :
          'Click to clock in for today'),
      icon: Clock,
      action: handleMarkAttendance,
      disabled: isMarkingAttendance || !!(todayAttendance && todayAttendance.clock_out)
    },
    {
      title: 'Create Task',
      description: 'Assign a new task',
      icon: CheckCircle,
      action: handleCreateTask,
      disabled: false
    },
    {
      title: 'Apply Leave',
      description: 'Submit leave request',
      icon: Calendar,
      action: handleApplyLeave,
      disabled: false
    },
  ];

  // Calculate metrics
  const activeEmployees = employees.length;
  const totalTasks = 10;
  const completedTasks = 7;
  const todayAttendanceCount = dashboardStats.today_attendance;
  const pendingLeaves = dashboardStats.pending_leaves;

  const keyMetrics = [
    {
      title: 'Total Leads',
      value: loadingLeads ? 'Loading...' : errorLeads ? 'Error' : totalLeadsCount.toString(),
      change: '+12%',
      trend: 'up' as const,
      icon: Users,
      color: 'bg-blue-500',
      description: 'Total leads in system'
    },
    {
      title: 'Hot Leads',
      value: loadingLeads ? 'Loading...' : errorLeads ? 'Error' : hotLeadsCount.toString(),
      change: '+8%',
      trend: 'up' as const,
      icon: TrendingUp,
      color: 'bg-green-500',
      description: 'High priority leads'
    },
    {
      title: 'Active Employees',
      value: loadingEmployees ? 'Loading...' : errorEmployees ? 'Error' : activeEmployees.toString(),
      change: '+2%',
      trend: 'up' as const,
      icon: UserPlus,
      color: 'bg-purple-500',
      description: 'Currently active staff'
    },
    {
      title: 'Tasks Completed',
      value: `${completedTasks}/${totalTasks}`,
      change: '+15%',
      trend: 'up' as const,
      icon: CheckCircle,
      color: 'bg-emerald-500',
      description: 'Task completion rate'
    },
  ];

  const secondaryMetrics = [
    {
      title: "Today's Attendance",
      value: loadingStats ? 'Loading...' : errorStats ? 'Error' : todayAttendanceCount.toString(),
      icon: Clock,
      color: 'text-blue-600',
      description: 'Employees present today'
    },
    {
      title: 'Pending Leaves',
      value: loadingStats ? 'Loading...' : errorStats ? 'Error' : pendingLeaves.toString(),
      icon: Calendar,
      color: 'text-orange-600',
      description: 'Leave requests pending approval'
    },
    {
      title: 'Revenue Target',
      value: '₹2.5M',
      icon: Target,
      color: 'text-green-600',
      description: 'Monthly revenue goal'
    },
    {
      title: 'Performance Score',
      value: '94%',
      icon: Award,
      color: 'text-purple-600',
      description: 'Overall performance'
    },
  ];

  const conversionRate = totalLeadsCount > 0
    ? ((hotLeadsCount / totalLeadsCount) * 100).toFixed(1)
    : '0';

  return (
    <div className="space-y-4 md:space-y-6">
      {/* Welcome */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg p-4 md:p-6 text-white">
        <h1 className="text-xl md:text-2xl font-bold mb-2">
          Welcome back, {currentUser.username}!
        </h1>
        <p className="text-indigo-100 text-sm md:text-base">
          Here's what's happening in your organization today.
        </p>

        {/* ✅ IMPROVED: Better attendance status display */}
        <div className="flex flex-wrap gap-4 mt-4">
          <div className="bg-white/20 rounded-lg px-3 py-2">
            <span className="text-sm opacity-90">Hot Leads:</span>
            <span className="ml-2 font-bold">{hotLeadsCount}</span>
          </div>
          <div className="bg-white/20 rounded-lg px-3 py-2">
            <span className="text-sm opacity-90">Conversion:</span>
            <span className="ml-2 font-bold">{conversionRate}%</span>
          </div>
          <div className="bg-white/20 rounded-lg px-3 py-2">
            <span className="text-sm opacity-90">Active Staff:</span>
            <span className="ml-2 font-bold">{activeEmployees}</span>
          </div>
          <div className="bg-white/20 rounded-lg px-3 py-2">
            <span className="text-sm opacity-90">Your Status:</span>
            <span className="ml-2 font-bold">
              {loadingTodayAttendance ? '⏳ Checking...' : attendanceMessage}
            </span>
          </div>
        </div>
      </div>

      {/* Error Display */}
      {(errorLeads || errorEmployees || errorStats) && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h3 className="text-sm font-medium text-yellow-800">API Issues Detected</h3>
          <div className="mt-2 text-sm text-yellow-700">
            {errorLeads && <p>Leads: {errorLeads}</p>}
            {errorEmployees && <p>Employees: {errorEmployees}</p>}
            {errorStats && <p>Dashboard Stats: {errorStats}</p>}
          </div>
        </div>
      )}

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
        {keyMetrics.map((metric, idx) => {
          const Icon = metric.icon;
          return (
            <div key={idx} className="bg-white rounded-lg p-4 md:p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <p className="text-xs md:text-sm font-medium text-gray-600">{metric.title}</p>
                  <p className="text-xl md:text-2xl font-bold text-gray-900 mt-1">
                    {metric.value}
                  </p>
                  <p className="text-xs text-gray-500 mt-1">{metric.description}</p>
                  <div className="flex items-center mt-2">
                    {metric.trend === 'up' ? (
                      <ArrowUpRight className="w-3 h-3 md:w-4 md:h-4 text-green-500" />
                    ) : (
                      <ArrowDownRight className="w-3 h-3 md:w-4 md:h-4 text-red-500" />
                    )}
                    <span className={`text-xs md:text-sm font-medium ml-1 ${metric.trend === 'up' ? 'text-green-600' : 'text-red-600'
                      }`}>
                      {metric.change}
                    </span>
                  </div>
                </div>
                <div className={`p-2 md:p-3 rounded-lg ${metric.color} ml-4`}>
                  <Icon className="w-5 h-5 md:w-6 md:h-6 text-white" />
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Secondary Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
        {secondaryMetrics.map((metric, idx) => {
          const Icon = metric.icon;
          return (
            <div key={idx} className="bg-white rounded-lg p-4 md:p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow">
              <div className="flex items-center space-x-3">
                <Icon className={`w-5 h-5 md:w-6 md:h-6 ${metric.color}`} />
                <div>
                  <p className="text-xs md:text-sm font-medium text-gray-600">{metric.title}</p>
                  <p className="text-lg md:text-xl font-bold text-gray-900">
                    {metric.value}
                  </p>
                  <p className="text-xs text-gray-500 mt-1">{metric.description}</p>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Stats Summary */}
      <div className="bg-white rounded-lg p-4 md:p-6 shadow-sm border border-gray-100">
        <h3 className="text-base md:text-lg font-semibold text-gray-900 mb-4">Attendance & Leave Summary</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center p-4 bg-blue-50 rounded-lg">
            <p className="text-sm text-blue-600">Today's Attendance</p>
            <p className="text-2xl font-bold text-blue-800">
              {loadingStats ? '...' : todayAttendanceCount}
            </p>
            <p className="text-xs text-blue-600 mt-1">
              out of {activeEmployees} employees
            </p>
          </div>
          <div className="text-center p-4 bg-orange-50 rounded-lg">
            <p className="text-sm text-orange-600">Pending Leaves</p>
            <p className="text-2xl font-bold text-orange-800">
              {loadingStats ? '...' : pendingLeaves}
            </p>
            <p className="text-xs text-orange-600 mt-1">
              awaiting approval
            </p>
          </div>
          <div className="text-center p-4 bg-green-50 rounded-lg">
            <p className="text-sm text-green-600">Attendance Rate</p>
            <p className="text-2xl font-bold text-green-800">
              {activeEmployees > 0 ? Math.round((todayAttendanceCount / activeEmployees) * 100) : 0}%
            </p>
            <p className="text-xs text-green-600 mt-1">
              for today
            </p>
          </div>
        </div>
      </div>

      {/* ✅ UPDATED: Leads Overview Table with Assigned Employee Column */}
      <div className="bg-white rounded-lg p-4 md:p-6 shadow-sm border border-gray-100">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-base md:text-lg font-semibold text-gray-900">Leads Overview</h3>
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">Total: {totalLeadsCount}</span>
            <span className="text-sm text-green-600">Hot: {hotLeadsCount}</span>
          </div>
        </div>

        {loadingLeads ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
            <p className="text-gray-500 mt-2">Loading leads...</p>
          </div>
        ) : errorLeads ? (
          <div className="text-center py-8 text-red-600">
            <p>Failed to load leads</p>
          </div>
        ) : leads.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <p>No leads found</p>
          </div>
        ) : (
          <div className="overflow-hidden border border-gray-200 rounded-lg">
            {/* Table Container with Hidden Scrollbars */}
            <div className="overflow-x-auto overflow-y-auto max-h-96 [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]">
              <table className="w-full min-w-full divide-y divide-gray-200">
                {/* Table Header */}
                <thead className="bg-gray-50 sticky top-0 z-10">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                      Lead Details
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                      Company
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                      Status
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                      Value
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                      Assigned To
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap">
                      Added
                    </th>
                  </tr>
                </thead>

                {/* Table Body */}
                <tbody className="bg-white divide-y divide-gray-200">
                  {leads.map((lead) => {
                    const assignedEmployee = getAssignedEmployeeDetails(lead.assigned_to_employee_id);
                    return (
                      <tr
                        key={lead.id}
                        className="hover:bg-gray-50 transition-colors duration-150 cursor-pointer"
                      >
                        {/* Lead Details Column */}
                        <td className="px-4 py-3 whitespace-nowrap">
                          <div className="flex flex-col">
                            <span className="text-sm font-medium text-gray-900 truncate max-w-[200px]">
                              {lead.name}
                            </span>
                            <span className="text-sm text-gray-500 truncate max-w-[200px]">
                              {lead.email}
                            </span>
                            {lead.phone && (
                              <span className="text-sm text-gray-500 truncate max-w-[200px]">
                                {lead.phone}
                              </span>
                            )}
                          </div>
                        </td>

                        {/* Company Column */}
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className="text-sm text-gray-900 truncate max-w-[150px] block">
                            {lead.company || 'N/A'}
                          </span>
                        </td>

                        {/* Status Column */}
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${lead.status === 'hot'
                              ? 'bg-red-100 text-red-800'
                              : lead.status === 'warm'
                                ? 'bg-orange-100 text-orange-800'
                                : 'bg-blue-100 text-blue-800'
                            }`}>
                            {lead.status?.charAt(0).toUpperCase() + lead.status?.slice(1) || 'Unknown'}
                          </span>
                        </td>

                        {/* Value Column */}
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className="text-sm text-gray-900 font-medium">
                            {lead.value ? `₹${lead.value.toLocaleString()}` : 'N/A'}
                          </span>
                        </td>

                        {/* ✅ NEW: Assigned To Column */}
                        <td className="px-4 py-3 whitespace-nowrap">
                          <div className="flex items-center space-x-2">
                            <User className="w-4 h-4 text-gray-400" />
                            <div className="flex flex-col">
                              <span className="text-sm font-medium text-gray-900">
                                {assignedEmployee.name}
                              </span>
                              {assignedEmployee.employeeId !== 'N/A' && (
                                <span className="text-xs text-gray-500">
                                  {assignedEmployee.employeeId}
                                  {assignedEmployee.department && ` • ${assignedEmployee.department}`}
                                </span>
                              )}
                            </div>
                          </div>
                        </td>

                        {/* Added Column */}
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className="text-sm text-gray-500">
                            {lead.created_at ? formatTimeAgo(lead.created_at) : 'Recently'}
                          </span>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>

            {/* Table Footer with Summary */}
            <div className="bg-gray-50 px-4 py-3 border-t border-gray-200">
              <div className="flex justify-between items-center text-sm text-gray-600">
                <span>Showing {leads.length} of {totalLeadsCount} leads</span>
                <div className="flex space-x-4">
                  <span className="flex items-center">
                    <span className="w-2 h-2 bg-red-500 rounded-full mr-1"></span>
                    Hot: {hotLeadsCount}
                  </span>
                  <span className="flex items-center">
                    <span className="w-2 h-2 bg-orange-500 rounded-full mr-1"></span>
                    Warm: {leads.filter(lead => lead.status === 'warm').length}
                  </span>
                  <span className="flex items-center">
                    <span className="w-2 h-2 bg-blue-500 rounded-full mr-1"></span>
                    Cold: {leads.filter(lead => lead.status === 'cold').length}
                  </span>
                  <span className="flex items-center">
                    <User className="w-3 h-3 mr-1 text-gray-500" />
                    Assigned: {leads.filter(lead => lead.assigned_to_employee_id).length}
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Recent Activities & Quick Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
        {/* Recent Activities */}
        <div className="bg-white rounded-lg p-4 md:p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-base md:text-lg font-semibold text-gray-900">Recent Activities</h3>
            <Activity className="w-5 h-5 text-gray-400" />
          </div>
          <div className="space-y-3 md:space-y-4">
            {recentActivities.length === 0 ? (
              <div className="text-center py-4 text-gray-500">
                <p>No recent activities</p>
              </div>
            ) : (
              recentActivities.map(activity => {
                const Icon = activity.icon;
                return (
                  <div key={activity.id} className="flex items-start space-x-3">
                    <div className="bg-gray-100 p-2 rounded-lg">
                      <Icon className="w-4 h-4 text-gray-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">{activity.message}</p>
                      <p className="text-xs text-gray-500">{activity.time}</p>
                    </div>
                  </div>
                );
              })
            )}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-white rounded-lg p-4 md:p-6 shadow-sm border border-gray-100">
          <h3 className="text-base md:text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
          <div className="grid grid-cols-1 gap-3">
            {quickActions.map((action, idx) => {
              const Icon = action.icon;
              return (
                <button
                  key={idx}
                  onClick={action.action}
                  disabled={action.disabled}
                  className="flex items-center space-x-3 p-3 rounded-lg border border-gray-200 hover:bg-gray-50 hover:border-indigo-300 transition-all text-left w-full disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Icon className="w-5 h-5 text-indigo-600" />
                  <div>
                    <p className="text-sm font-medium text-gray-900">{action.title}</p>
                    <p className="text-xs text-gray-500">{action.description}</p>
                  </div>
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {/* Add New Lead Modal */}
      {showLeadModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-semibold mb-4">Add New Lead</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Basic Information */}
              <div className="space-y-3">
                <h4 className="font-medium text-gray-700">Basic Information</h4>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Name *</label>
                  <input
                    type="text"
                    placeholder="Enter full name"
                    value={newLead.name}
                    onChange={(e) => setNewLead({ ...newLead, name: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Email *</label>
                  <input
                    type="email"
                    placeholder="user@example.com"
                    value={newLead.email}
                    onChange={(e) => setNewLead({ ...newLead, email: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Phone</label>
                  <input
                    type="text"
                    placeholder="Phone number"
                    value={newLead.phone}
                    onChange={(e) => setNewLead({ ...newLead, phone: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Company *</label>
                  <input
                    type="text"
                    placeholder="Company name"
                    value={newLead.company}
                    onChange={(e) => setNewLead({ ...newLead, company: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Source</label>
                  <input
                    type="text"
                    placeholder="How did they find us?"
                    value={newLead.source}
                    onChange={(e) => setNewLead({ ...newLead, source: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>
              </div>

              {/* Lead Details */}
              <div className="space-y-3">
                <h4 className="font-medium text-gray-700">Lead Details</h4>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Status</label>
                  <select
                    value={newLead.status}
                    onChange={(e) => setNewLead({ ...newLead, status: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  >
                    <option value="cold">Cold</option>
                    <option value="warm">Warm</option>
                    <option value="hot">Hot</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Stage</label>
                  <select
                    value={newLead.stage}
                    onChange={(e) => setNewLead({ ...newLead, stage: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  >
                    <option value="lead">Lead</option>
                    <option value="qualified">Qualified</option>
                    <option value="proposal">Proposal</option>
                    <option value="negotiation">Negotiation</option>
                    <option value="closed-won">Closed Won</option>
                    <option value="closed-lost">Closed Lost</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Value (₹)</label>
                  <input
                    type="number"
                    placeholder="0.00"
                    value={newLead.value}
                    onChange={(e) => setNewLead({ ...newLead, value: parseFloat(e.target.value) || 0 })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    min="0"
                    step="0.01"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Lead Score (0-100)</label>
                  <input
                    type="number"
                    placeholder="0"
                    value={newLead.lead_score}
                    onChange={(e) => setNewLead({ ...newLead, lead_score: parseInt(e.target.value) || 0 })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    min="0"
                    max="100"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Assigned To Employee ID</label>
                  <input
                    type="number"
                    placeholder="Employee ID"
                    value={newLead.assigned_to_employee_id || ''}
                    onChange={(e) => setNewLead({ ...newLead, assigned_to_employee_id: e.target.value ? parseInt(e.target.value) : undefined })}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    min="1"
                  />
                </div>
              </div>

              {/* Full Width Fields */}
              <div className="md:col-span-2 space-y-3">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-600 mb-1">Last Contact Date</label>
                    <input
                      type="date"
                      value={newLead.last_contact}
                      onChange={(e) => setNewLead({ ...newLead, last_contact: e.target.value })}
                      className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-600 mb-1">Next Follow-up Date</label>
                    <input
                      type="date"
                      value={newLead.next_follow_up}
                      onChange={(e) => setNewLead({ ...newLead, next_follow_up: e.target.value })}
                      className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Notes</label>
                  <textarea
                    placeholder="Additional notes about the lead..."
                    value={newLead.notes}
                    onChange={(e) => setNewLead({ ...newLead, notes: e.target.value })}
                    rows={3}
                    className="w-full border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end space-x-2 mt-6">
              <button
                onClick={() => setShowLeadModal(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateLeadSubmit}
                disabled={!newLead.name || !newLead.email || !newLead.company}
                className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors"
              >
                Create Lead
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Apply Leave Modal */}
      {showLeaveModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Apply Leave</h3>
            <div className="space-y-3">
              <select
                value={leaveData.leave_type}
                onChange={(e) => setLeaveData({ ...leaveData, leave_type: e.target.value })}
                className="w-full border border-gray-300 rounded px-3 py-2"
              >
                <option value="casual">Casual Leave</option>
                <option value="sick">Sick Leave</option>
                <option value="earned">Earned Leave</option>
              </select>
              <input
                type="date"
                value={leaveData.start_date}
                onChange={(e) => setLeaveData({ ...leaveData, start_date: e.target.value })}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
              <input
                type="date"
                value={leaveData.end_date}
                onChange={(e) => setLeaveData({ ...leaveData, end_date: e.target.value })}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
              <input
                type="tel"
                placeholder="Emergency Contact Number"
                value={leaveData.emergency_contact || ""}
                onChange={(e) => setLeaveData({ ...leaveData, emergency_contact: e.target.value })}
                className="w-full border border-gray-300 rounded px-3 py-2 mt-3"
                maxLength={10}
                pattern="[0-9]{10}"
              />
              <textarea
                placeholder="Reason for leave"
                value={leaveData.reason}
                onChange={(e) => setLeaveData({ ...leaveData, reason: e.target.value })}
                className="w-full border border-gray-300 rounded px-3 py-2"
                rows={3}
              />
            </div>
            <div className="flex justify-end space-x-2 mt-4">
              <button
                onClick={() => setShowLeaveModal(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateLeaveSubmit}
                className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
              >
                Apply Leave
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;